version: "3.8"

networks:
  my-network:
    driver: bridge

services:
  #################################
  # The User microservice
  #################################
  user:
    image: teamduchess/user:latest
    build:
      context: ./services/user
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    restart: always
    environment:
      - DB_HOST_DOCKER=db-user
      - DB_PORT_DOCKER=5432
      - DB_NAME_DOCKER=user_db
      - DB_USER_DOCKER=myuser
      - DB_PASSWORD_DOCKER=mypassword
      - DOCKER_ENV=true
    depends_on:
      - db-user
    networks:
      - my-network

  #################################
  # The Chat microservice
  #################################
  chat:
    image: teamduchess/chat:latest
    build:
      context: ./services/chat
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    restart: always
    environment:
      - DB_HOST_DOCKER=db-chat
      - DB_PORT_DOCKER=5432
      - DB_NAME_DOCKER=chat_db
      - DB_USER_DOCKER=myuser
      - DB_PASSWORD_DOCKER=mypassword
      - DOCKER_ENV=true
    depends_on:
      - db-chat
    networks:
      - my-network

  #################################
  # ner microservice
  #################################
  ner-llm:
    image: teamduchess/ner-llm:latest
    build:
      context: ./services/ner-llm
      dockerfile: ./Dockerfile
      target: development
    env_file:
      - .local.env
    environment:
      - PG_HOST=db-ner-llm
      - CORS_ORIGINS=http://localhost:3000
    ports:
      - "8000:8000"
    depends_on:
      db-ner-llm:
        condition: service_healthy
    volumes:
      - ./services/ner-llm:/usr/src/app/ner-llm
    networks:
      - my-network

    #################################
  # ner microservice
  #################################
  upload:
    image: teamduchess/upload:latest
    build:
      context: ./services/upload
      dockerfile: ./Dockerfile
      target: development
    env_file:
      - .local.env
    environment:
      - NER_LLM_URL=http://ner-llm:8000
      - DOCKER_ENV=true
    ports:
      - "8002:8002"
    depends_on:
      db-ner-llm:
        condition: service_healthy
    volumes:
      - ./services/upload:/usr/src/app/upload
    networks:
      - my-network

  #################################
  # Analytics microservice
  #################################
  analytics:
    image: teamduchess/analytics:latest
    build:
      context: ./services/analytics
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    restart: always
    environment:
      - DOCKER_ENV=true
    depends_on:
      - chat
    networks:
      - my-network

  #################################
  # The Qna microservice
  #################################
  qna:
    image: teamduchess/qna:latest
    build:
      context: ./services/qna
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    restart: always
    environment:
      - DB_HOST_DOCKER=db-qna
      - DB_PORT_DOCKER=5432
      - DB_NAME_DOCKER=qna_db
      - DB_USER_DOCKER=myuser
      - DB_PASSWORD_DOCKER=mypassword
      - DOCKER_ENV=true
    depends_on:
      - db-qna
    networks:
      - my-network

  #################################
  # The Langchain microservice
  #################################
  langchain:
    image: teamduchess/langchain:latest
    build:
      context: ./services/langchain
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    restart: always
    env_file:
      - .local.env
    networks:
      - my-network
    environment:
      - ENVIRONMENT=docker

  #################################
  # PostgreSQL for User microservice
  #################################
  db-user:
    image: postgres:13
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    ports:
      - "5433:5432"
    networks:
      - my-network
    volumes:
      - ./services/user/src/scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
      - db-user-data:/var/lib/postgresql/data
    restart: always

  #################################
  # PostgreSQL for Chat microservice
  #################################
  db-chat:
    image: postgres:13
    environment:
      POSTGRES_DB: chat_db
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    ports:
      - "5434:5432"
    networks:
      - my-network
    volumes:
      - ./services/chat/src/scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
      - db-chat-data:/var/lib/postgresql/data
    restart: always

  #################################
  # PostgreSQL for QnA microservice
  #################################
  db-qna:
    image: postgres:13
    environment:
      POSTGRES_DB: qna-db
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    ports:
      - "5436:5432"
    networks:
      - my-network
    volumes:
      - ./services/qna/src/scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
      - db-qna-data:/var/lib/postgresql/data
    restart: always

  #################################
  # PostgreSQL for ner microservice
  #################################
  db-ner-llm:
    image: postgres:16
    expose:
      - "5432"
    ports:
      - "5435:5432"
    environment:
      POSTGRES_DB: langchain
      POSTGRES_USER: langchain
      POSTGRES_PASSWORD: langchain
    volumes:
      - db-ner:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U langchain"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my-network

volumes:
  db-user-data:
  db-chat-data:
  db-ner:
  db-qna-data:
